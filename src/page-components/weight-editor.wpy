<template>
  <view id="weight-editor" class="canvas-page-wrapper">
    <form class="md-list" @submit="submit">
      <view class="section">
        <text class="title">详细信息</text>
        <view class="md-form-item">
          <image src="../assets/icons/scale-bathroom.svg"></image>
          <input type="digit" name="value" value="{{ weightData.value }}" placeholder="体重" @input="valueChanged" />
          <text>kg</text>
        </view>
        <view class="md-form-item">
          <image src="../assets/icons/calendar.svg"></image>
          <picker mode="date" name="date" value="{{ weightData.date }}" @change="dateChanged">
            <view>{{ weightData.date }}</view>
          </picker>
        </view>
      </view>
      <view class="section">
        <text class="title">备注</text>
        <view class="textarea-wrapper md-list-item">
          <textarea name="note" value="{{ weightData.note }}" placeholder="点此添加备注" @input="noteChanged" auto-height></textarea>
        </view>
      </view>
      <view class="section submit">
        <button class="md-button" formType="submit">{{ mode === 'add' ? '提交' : '修改' }}</button>
        <view class="note delete" wx:if="{{ mode === 'edit' }}" @tap="removeRecord">删除此记录</view>
        <view class="note" wx:if="{{ mode === 'add' }}">建议在晨起排便后、进食前测量</view>
      </view>
    </form>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import SubmitMixin from '../mixins/submit'
  import { formatDate, generateChangeMethods } from '../lib/util'

  export default class WeightEditor extends wepy.component {
    mixins = [SubmitMixin]

    props = {
      mode: {
        type: String,
        default: 'add'
      }
    }

    data = {
      weightData: {
        value: '',
        date: formatDate(),
        note: ''
      }
    }

    methods = {
      ...generateChangeMethods('weightData', ['value', 'date', 'note']),
      setData ({ value, date, note }) {
        this.weightData = { value, date, note }
      },
      async removeRecord () {
        if (await this.$modal('提示', '你确定要删除这条体重记录吗？', true)) {
          await this.$loading('正在处理...')
          const result = (await this.$http.delete('weight', { params: { date: new Date(this.weightData.date) } })).data
          await this.$loading()

          if (result.code) {
            throw new Error(`记录删除失败: ${result.message} (${result.code})`)
          }

          this.$navigateBack('weight-editor', true)
        }
      }
    }

    async submit () {
      const data = Object.assign({}, this.weightData)

      if (!/[0-9.]+/.test(data.value)) {
        await this.$modal('提示', '体重数值无效，请重新输入')
      } else {
        data.value = parseFloat(data.value)
        data.date = new Date(data.date)

        const result = (await this.$http.post('weight', data)).data
        if (result.code) {
          throw new Error(`数据提交失败: ${result.message} (${result.code})`)
        }

        // 返回上级页面
        setTimeout(() => {
          if (this.mode === 'add') {
            this.$emit('switchToReport', 0)
          } else {
            this.$navigateBack('weight-editor', true)
          }
        }, 1000)

        this.refresh()
        return true
      }
    }

    refresh () {
      this.weightData = {
        value: '',
        date: formatDate(),
        note: ''
      }

      this.$apply()
    }
  }
</script>

<style lang="scss">
  @import '../assets/styles/variables';
</style>
